JAVA

Em java, todo código deve estar dentro de uma classe(class).

		ex.: public class Main {...}

	OBS.: A classe deve ter o MESMO nome do arquivo em que ela está,
	      e também é obrigatório ter o 'public' antes de declarar a
	      classe. Depois podemos criar outras classes, poreém é 
	      obrigatório que ao menos uma das classes tenha está 
	      configuração.

Para criar uma variável, em Java é necessário declarar o TIPO(E por isso
que é uma linguagem fortenmente tipada.), e após isto a variável não 
poderá receber nenhum valor de um TIPO diferente, como 'string' por 
exemplo.

	ex.: int minhaIdade = 25;
	
	Para criar uma variável com valor INTEIRO.

Também podemos criar uma váriavel utilizando a sintaxe 'var', para que o
próprio JAVA denomine qual o seu tipo. Neste caso o java vai INFERIR o 
tipo da variável.

	ex.: var nome = 'Anderson';


TIPOS PRIMITIVOS

Em Java uma váriavel pode ter vários tipos primitivos diferentes para o 
mesmo tipo de variável, dependendo do seu TAMANHO/COMPRIMENTO. 
Por exemplo:

INTEIROS:

	* byte => 8 bits => -128 a 127

	* short => 16 bits => -32.768 a 32.767

	* int => 32 bits => -2.147.483.648 a 2.147.483.647

	* long => 64 bits => -9.233.372.03...(nescessário um 'L' no fim)

		ex: long l = 100000000L;

DECIMAIS:

	* float => 32 bits => precisão simples(necessário um 'f' no fim)

		ex.: float f = 10.5f;

	* double = 64 bits => precisão dupla(para numeros muito longos).

STRINGS:

	* String => representar palavras e frases => "" (ASPAS DUPLAS).

	* char => representar um unico caractere => '' (ASPAS SIMPLES).

BOOLEANOS:

	* boolean b = true => verdadeiro.
	
	* boolean b = false => falso.


Primeiros passos para codar:

Dentro da classe principal é necessário uma assinatura do método 
principal, o ponto de entrada de um programa Java executável. Ele 
define como a máquina virtual Java (JVM) inicia a execução do programa. 

	ex.: public class Main {
    		public static void main(String[] args) {...}
	     }

	Isto define onde a JVM vai iniciar a execução do programa.

	* public: Indica que o método é acessível de qualquer lugar.

	* static: Significa que o método pertence à classe e não a uma 
		  instância específica dela.

	* void: Indica que o método não retorna nenhum valor.

	* main: É o nome do método, e é o método especial que a JVM 
		procura para iniciar a execução do programa. 

	* String[] args: Define um array de strings chamado args como 
			 parâmetro do método.


PRINT

Para printar algo no terminal é necessário o método:

	ex.: System.out.println("Hello, world!");

Ou:

	ex.: System.out.print("Hello, world!")

O primeiro adiciona uma nova linha após a impressão, enquanto o segundo 
mantém o cursor na mesma linha.


CONDICIONAIS

if/ else if / else, basicamente igual a outras linguagens. por exemplo:

	* if (bool) {...} 

		SE bool for TRUE...

	* else if (n < 1) {...}

		SE NÃO SE...

	* else {...}

		SE NÃO...


ARRAYS

Para declarar um array em JAVA utilizamos a seguinte sintaxe:

	ex.: int[] listaDeInteiros = {1, 2, 3 ,4 ,5};

	* PRIMEIRO você indica que é um array de INTEIROS: int[] ;

	* SEGUNDO: Você nomeia o array: listaDeInteiros ;

	* TERCEIRO: Você atribui um valor ao array: {1, 2, 3 ,4 ,5} ;


Você também pode atribuir apenas o COMPRIMENTO do ARRAY:

	ex.: int[] listaDeInteiros = new int[5];

	Vai criar uma array de comprimento 5, porém sem nenhum valor 
	atribuído a nenhuma posição.


  Métodos úteis:

	- NomeDoArray.length : Para pegar o COMPRIMENTO de uma array.

	- NomeDoArrayList.size() : Para pegar o tamanho de um ArrayList.


ARRAYLIST

Um array, basicamente, serve para armazenar uma coleção de valores do 
mesmo tipo. E em JAVA, não podemos modificar o comprimento de um array, 
sem utilizar a classe ARRAYLIST.

	ex.: ArrayList<String> nomes = new ArrayList<>();

		* PRIMEIRO: Declara uma variavel de ArrayList do tipo 
			    String: ArrayList<String> ;

		* SEGUNDO: Nomeia o ArrayList: nomes ;

		* TERCEIRO: Atribui a instancia como um NOVO ArrayList:
			    new ArrayList<>() ;

	OBS.: Lembre-se de verificar se o IntelliJ importou a classe 
	      'ArrayList'. Ex.: import java.util.ArrayList;

Para ADICIONAR valores ao Arraylist:

	ex.: nomes.add("Bernardo");

		* Assim adicionando um valor do tipo STRING ao ArrayList
		  'nomes'.

Para REMOVER valores ao ArrayList:

	ex.: nomes.remove(0);

		* Vai remover o valor do indice 0.

	ex.: nomes.remove("Bernardo");

		* Vai remover o valor "Bernardo".


LOOPS

* FOR:

As estruturas de repetição em JAVA, como FOR é muito semelhante ao de 
diversas linguagens, segue o exemplo:

	ex.: for (int i = 0; i < nomes.size(); i++) {...}

		* PRIMEIRO: A variavel de interação => int i = 0 ;

		* SEGUNDO: A condição => nomes.size() ;

		* TERCEIRO: O incremento => i++ ;


Existe um FOR especial para percorrer todo um ArrayList, segue o exemplo:

	ex.: for (String nome : nomes) {
            	System.out.println(nome);
             }

		* PRIMEIRO: A variavel de interação => String nome ;

		* SEGUNDO: O for-each, o interador => : ;

		* TERCEIRO: O nosso ArrayList => nomes ;

* WHILE:

As estruturas de repetição em JAVA, como WHILE é muito semelhante ao de 
diversas linguagens, segue o exemplo:

	ex.: while(contador < 5){...}

		* ENQUANTO a condição não for sanada, o loop vai 
		  continuar.

	ex.: int contador = 0;
             while(contador < 5){
            	System.out.println("Estou no while!");
            	contador++;
             }

		* ENQUANTO o contador for menor que 5, vai printar a 
		  mensagem e incrementar 1.


CASTING

Casting é o processo de converter um tipo de dado para outro. Pode ser 
implícito (automático) ou explícito (requerendo um "cast" no código). 
Existem dois tipos principais de casting: casting de tipos primitivos e 
casting de objetos. 

	* EXPLICITO:
	
	   - Para converter um DOUBLE em INT:

		ex.: double meuDouble = 3.0;
        	     int meuInt = (int) meuDouble; 

			* Declaro uma varivel tipo DOUBLE de valor '3.0'.

			* Declaro uma nova variavel tipo INT que recebe o 
			  valor da variavel do tipo DOUBLE convertida em
			  INT: (int) meuDouble.

	   - Para converter uma STRING em INT
		
		ex.: String minhaString = "10";
        	     int meuInt3 = Integer.parseInt(minhaString);

			* Declaro uma variavel tipo STRING de valor "10".	

			* Declaro uma variavel do tipo INT que recebe o 
			  valor da variavel do tipo STRING e converte em
			  INT utilizando a classe Integer: 
				- Integer.parseInt(minhaString);

	   - Para converter um INT em STRING:

		ex.: String minhaString2 = String.valueOf(meuInt3);
		
			* Declaro uma variavel do tipo STRING que recebe
			  o valor da variavel do tipo INT e converte em
			  STRING utilizando a classe String: 
				- String.valueOf(meuInt3);

	
	* IMPLICITO:

	   - Para converter um INT em DOUBLE:

		ex.: int meuInt2 = 5;
        	     double meuDouble2 = meuInt2;

			* O JAVA converte a variavel automaticamente de
			  INT para DOUBLE.


 
CLASSES

Uma classe é um modelo ou "plano" para CRIAR OBJETOS, representando um 
tipo de dado que contém atributos (variáveis) que definem o seu estado 
e métodos (funções) que definem o seu comportamento.

	ex.: class Carro {
    		public Carro(){
        		System.out.println("Carro criado!");
    	  	}
	     } 

		* class Carro {...}: Criamos uma classe.

		* public Carro(){...}: Criamos o CONSTRUTOR, que são 
			métodos especiais usados para criar e inicializar
			objetos de uma classe. O construtor tem o mesmo 
			nome da classe e não tem tipo de retorno.

	PARA CHAMAR A CLASSE:

		ex.: Carro meuCarro = new Carro();

		OBS.: A chamada OBRIGATÓRIAMENTE deve estar dentro da 
		      classe PRINCIPAL(que nomeia o arquivo .java). 


   - ATRIBUTOS de uma classe:

	São as variáveis que esta classe possui e armazenam os dados do 
	objeto, segue o exemplo:

		ex.: class Carro {
			double preco;
			String cor;
			
			public Carro(){...}


   - MÉTODOS(funções)

	 São funções definidas na classe que realizam ações específicas.
	 Segue o exemplo:

		ex.: class Carro {
			double preco;
			String cor;
			
			public Carro(){...}

			public double getPreco() {
        			return preco;
    			}

		* É uma função que pode ou não ter retorno(void) e faz
		  uma ação específicas, que no caso foi pegar o preço.



  OUTRO EXEMPLO:

	ex.: class Carro {
    		String modelo;

    		public Carro(String modelo){
            		this.modelo = modelo;
    		}

		public void acelerar() {
        		System.out.println("Acelerar o " + modelo)
    		}
	     }

	EXPLICAÇÃO: 

		1- class Carro {...} : Criação da classe;

		2- String modelo : Atibuto da classe;

		3- public Carro(String modelo){..}: Construtor da classe,
				que recebe como parametro o ATRIBUTO da
				classe;

		4- this.modelo = modelo : A INSTANCIA atual do objeto
					  recebe o valor da variavel
					  'modelo'. 
					  O ATRIBUTO 'modelo' do objeto
					  recebe o valor da variável 
					  'modelo';

		5- public void acelerar() {...} : O método(função) que 
				retorna NADA(void), printa a mensagem.



MODIFICADORES DE ACESSO

Em Java, modificadores de acesso são palavras-chave usadas para definir 
a visibilidade de classes, métodos e atributos (variáveis dentro de uma 
classe). Eles controlam quais outras classes e partes do código podem 
acessar e interagir com esses elementos. 

	1. public: Membros marcados como public podem ser acessados de 
	   	   qualquer lugar, por qualquer classe, 
		   independentemente do pacote ou hierarquia. 

	2. private: Membros private só podem ser acessados dentro da 
	   	    própria classe onde foram declarados. 

	3. protected: Membros protected podem ser acessados dentro da 
	 	      própria classe, por classes do mesmo pacote e por 
		      subclasses (classes que herdam da classe original). 

	4. default (sem modificador): Quando nenhum modificador de 
				      acesso é especificado, o membro 
				      tem acesso padrão, que é restrito 
				      ao pacote onde a classe está 
				      definida. 



INTERFACES

Uma interface define um "contrato" de métodos que as classes devem 
implementar, fornecendo um modelo de como os objetos devem se comportar 
sem detalhar sua implementação. Ela pode conter métodos abstratos 
(sem corpo), métodos padrão (com implementação), métodos estáticos e 
constantes. Interfaces promovem a abstração, permitem a polimorfismo e 
habilitam a "herança múltipla" ao permitir que uma classe implemente 
várias interfaces simultaneamente.

Criamos um novo arquivo de INTERFACE, segue o exemplo: 

	ex.: public interface Carros {
    		void acelerador();

    		void freio();
	     }

	* Cria apenas a 'CASCA' dos metodos que um objeto deve seguir.


PARA IMPLEMENTAR UMA INTERFACE EM UMA CLASSE:
Para implementar os metodos automaticamente basta passar o mouse por 
cima do nome da classe e clicar em 'implements methods'. 

	ex.: public class Palio implements Carros{

    		@Override
    		public void acelerador() {
			...
    		}

    		@Override
    		public void freio() {
			...
    		}

	* EM UMA NOVA CLASSE(outro arquivo) implementamos a INTERFACE
	  'Carros' e seus metodos.

	* @Override é uma anotação usada para indicar que um método de 
	  uma classe filha está sobrescrevendo um método com a mesma 
	  assinatura (nome, tipos de parâmetros e tipo de retorno) da 
	  classe pai (superclasse).


PARA CHAMAR A INTERFACE E CRIAR NOVOS OBJETOS:
Na classe PRINCIPAL...

	ex.: Carros meuCarro = new Palio();

		* Carros : É a interface;
	
		* meuCarro : É a variavel do tipo 'Carros';

		* new Palio() : É o novo objeto da classe onde a 
				interface foi implementada. 


CLASSES ABSTRATAS 

Uma classe abstrata é uma classe que não pode ser instanciada 
diretamente, servindo como um modelo para outras classes. Ela pode 
conter métodos abstratos (sem implementação) e métodos concretos 
(com implementação). O principal objetivo é fornecer um esqueleto comum 
para as subclasses.

NÃO é possivel criar objetos diretamente de uma classe abstrata. Segue o
exemplo:

	ex.: public abstract class SerVivo {
    		public abstract void Respirar();
    
    		public void Dormir() {
        		System.out.println("Dormindo...");
    		}
	     }

	1- Criamos a classe abstrata "SerVivo"(em um novo arquivo);	

	2- Criamos SUBCLASSES, sem implementação ou com implementação.


HERANÇA 

A herança é um conceito de Programação Orientada a Objetos (POO) que 
permite que uma classe (a subclasse) herde características e 
comportamentos (atributos e métodos) de outra classe (a superclasse).

Por exemplo, em JAVA para que uma classe HERDE atributos e metodos de 
outra classe, utilizamos a PALAVRA-CHAVE 'extends'.

	ex.: public class Humano extends SerVivo {...}

	* A classe 'Humano' HERDA caracteristicas da classe 'SerVivo'.

	OBS.: Se houver algum método sem implementação na classe PAI,
	      você deverá implementar algo neste método na classe FILHO.


Para chamar a classe abstrata e criar um novo objeto:
Na classe PRINCIPAL...

	ex.:  SerVivo meuSer = new Humano();

OBS.: Sempre que uma classe HERDA caracteristicas de outra classe, esta 
      classe se torna uma SUBCLASSE de sua classe PAI.
      Uma classe só pode herdar caracteristicas de UMA classe PAI.


Uma classe pode HERDAR de uma SUPERCLASSE(classe-pai) um metodo 
CONSTRUTOR. Para acessar este metodo contrutor da superclasse na 
classe-filho usamos a palavra chave 'super'.

CONSTRUTOR da superclasse:

	   * public abstract class SerVivo {

    		protected int idade;

    		public SerVivo(int idade){
        		this.idade = idade;
    		}
	     }

Para acessar este METODO CONSTRUTOR da superclasse na classe-filho 
criamos um novo metodo e nele usamos a palavra chave 'super' e passamos
o parametro entre os parenteses:

	ex.: public class Humano extends SerVivo {

    		public Humano(){
        		super(42);
    		}
		...
	     }




POLIMORFISMO

Polimorfismo significa "muitas formas" e permite que um objeto se 
comporte de maneiras diferentes dependendo do contexto em que é usado. 
Permite que você use a mesma INTERFACE para diferentes tipos de objetos,
tornando o código mais flexível e reutilizável.

Por exemplo: Eu tenho um PALIO(classe/objeto) e um GOL(classe/objeto). E
	     os 2 são CARROS(interface).
	     Um PALIO ACELERA(metodo) e FREIA(metodo) de uma forma,
	     e o GOL de outra. Por tanto, podemos ter objetos do mesmo
	     TIPO(interface), com comportamentos diferentes(metodos).


TRATAMENTO DE EXCESSÕES

O tratamento de exceções é um mecanismo para lidar com situações 
inesperadas que podem ocorrer durante a execução de um programa, 
evitando que o programa pare abruptamente. Ele envolve o uso de blocos 
try, catch e finally para capturar e tratar erros, permitindo que o 
programa continue a executar de forma controlada. 

Por exemplo: Eu tenho um Carro quebrado(nulo), e eu peço para 
	     ACELERAR(metodo) este carro, porém vai dar errado pois ele 
	     está quebrado(NullPointerException).

	ex.:  Carros carroQuebrado = null;

        	try{
            		carroQuebrado.acelerador();

        	}catch (NullPointerException exception){
            		System.out.println("Venda este carro. Ele não 
			funciona!");
        	}

	1- Crio a variável 'carroQuebrado' do tipo 'Carros' com o valor
	   NULO;

	2- TENTO(try) acelerar o carro;

	3- Se de o carro NÃO FUNCIONA(null) eu CAPTURO(catch) o erro
	   e mando a mensagem "Venda este carro. Ele não funciona!"
	





